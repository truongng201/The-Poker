// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id,
    email,
    username,
    hashed_password,
    image_url
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING user_id, email
`

type CreateUserParams struct {
	UserID         string      `json:"user_id"`
	Email          string      `json:"email"`
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	ImageUrl       pgtype.Text `json:"image_url"`
}

type CreateUserRow struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Username,
		arg.HashedPassword,
		arg.ImageUrl,
	)
	var i CreateUserRow
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id,
    user_id,
    email,
    username,
    image_url
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       int64       `json:"id"`
	UserID   string      `json:"user_id"`
	Email    string      `json:"email"`
	Username string      `json:"username"`
	ImageUrl pgtype.Text `json:"image_url"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.ImageUrl,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT 
    id,
    user_id,
    email,
    username,
    image_url
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID       int64       `json:"id"`
	UserID   string      `json:"user_id"`
	Email    string      `json:"email"`
	Username string      `json:"username"`
	ImageUrl pgtype.Text `json:"image_url"`
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.ImageUrl,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    id,
    user_id,
    email,
    username,
    image_url
FROM users
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUsersRow struct {
	ID       int64       `json:"id"`
	UserID   string      `json:"user_id"`
	Email    string      `json:"email"`
	Username string      `json:"username"`
	ImageUrl pgtype.Text `json:"image_url"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.Username,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    email = $1,
    username = $2,
    hashed_password = $3,
    image_url = $4
WHERE email = $5
RETURNING user_id, email
`

type UpdateUserParams struct {
	Email          string      `json:"email"`
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	ImageUrl       pgtype.Text `json:"image_url"`
	Email_2        string      `json:"email_2"`
}

type UpdateUserRow struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Username,
		arg.HashedPassword,
		arg.ImageUrl,
		arg.Email_2,
	)
	var i UpdateUserRow
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}
