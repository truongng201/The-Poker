// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: signup.sql

package database

import (
	"context"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT 
    id,
    user_id,
    email,
    is_verified
FROM users
WHERE email = $1
`

type CheckEmailExistsRow struct {
	ID         int64  `json:"id"`
	UserID     string `json:"user_id"`
	Email      string `json:"email"`
	IsVerified bool   `json:"is_verified"`
}

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (CheckEmailExistsRow, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var i CheckEmailExistsRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.IsVerified,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id,
    username,
    email,
    hashed_password
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING user_id, email
`

type CreateUserParams struct {
	UserID         string `json:"user_id"`
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

type CreateUserRow struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
	)
	var i CreateUserRow
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}
